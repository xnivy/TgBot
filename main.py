import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from tinydb import Query
import database as db
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=os.getenv("BOT_TOKEN"),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def is_admin(user_id: int) -> bool:
    admin_ids = list(map(int, os.getenv("ADMIN_IDS").split(',')))
    return user_id in admin_ids


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_hello(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —á—Ç–æ –±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /reg –∞ –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ —Ç–æ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /scan_pass –Ω–æ–º–µ—Ä –∫–æ–¥–∞")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg
class RegistrationState(StatesGroup):
    full_name = State()
    vehicle = State()

@dp.message(Command('reg'))
async def start_registration(message: types.Message, state: FSMContext):
    if is_admin(message.from_user.id):
        return await message.answer("üëë –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    user = db.User.table.get(Query().user_id == message.from_user.id)
    if user:
        return await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    await state.set_state(RegistrationState.full_name)
    await message.answer("""üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á""")

@dp.message(RegistrationState.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    if len(message.text.split()) < 3:
        return await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û")
    
    await state.update_data(full_name=message.text)
    await state.set_state(RegistrationState.vehicle)
    await message.answer("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–∏–ª–∏ '–Ω–µ—Ç'):")

@dp.message(RegistrationState.vehicle)
async def process_vehicle(message: types.Message, state: FSMContext):
    vehicle = message.text if message.text.lower() != '–Ω–µ—Ç' else None
    data = await state.get_data()
    
    if db.User.create(message.from_user.id, data['full_name'], vehicle):
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    else:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command('my_qrcode'))
async def show_my_qrcode(message: types.Message):
    user = db.User.table.get(Query().user_id == message.from_user.id)
    if not user:
        return await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
    
    if not user.get('qr_code_path'):
        return await message.answer("üîÑ QR-–∫–æ–¥ –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    text = f"""
üîë –í–∞—à –ø—Ä–æ–ø—É—Å–∫:
–§–ò–û: {user['full_name']}
–ù–æ–º–µ—Ä –¢–°: {user['vehicle'] or '–ù–µ—Ç'}
ID: {user['qr_id']}
    """
    await message.answer_photo(
        types.FSInputFile(user['qr_code_path']),
        caption=text
    )

# –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
@dp.message(Command('generate_user_qr'))
async def generate_user_qr(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        full_name = message.text.split(maxsplit=1)[1]
    except IndexError:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /generate_user_qr <–§–ò–û>")
    
    user = db.User.table.get(Query().full_name == full_name)
    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    qr_path = db.User.generate_qr(user['user_id'])
    if qr_path:
        await message.answer_document(
            types.FSInputFile(qr_path),
            caption=f"‚úÖ QR-–∫–æ–¥ –¥–ª—è {full_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
@dp.message(Command('scan_pass'))
async def handle_scan(message: types.Message):
    try:
        scanned_qr_id = int(message.text.split(maxsplit=1)[1])
    except (IndexError, ValueError):
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /scan_pass <QR-–∫–æ–¥>")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ (–¥–ª—è –ù–ï–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
    guest = db.Guest.table.get(Query().qr_id == scanned_qr_id)
    if guest:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if not guest['is_active']:
            return await message.answer("üîí –ì–æ—Å—Ç–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        if datetime.fromisoformat(guest['expires_at']) < datetime.now():
            return await message.answer("‚åõÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≥–æ—Å—Ç–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∏—Å—Ç–µ–∫")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–æ—Å—Ç—è
        db.PendingRequest.create(
            requester_id=message.from_user.id,
            pass_id=scanned_qr_id,
            user_type='guest'
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"access_allow_{scanned_qr_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"access_deny_{scanned_qr_id}")
            ]
        ])
        admin_text = (
            f"üîî –ó–∞–ø—Ä–æ—Å –≥–æ—Å—Ç—è:\n"
            f"QR-ID: {scanned_qr_id}\n"
            f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {guest['expires_at'][:10]}"
        )
        await bot.send_message(
            chat_id=os.getenv("ADMIN_CHAT_ID"),
            text=admin_text,
            reply_markup=keyboard
        )
        return await message.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user = db.User.table.get(Query().user_id == message.from_user.id)
    if user:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ QR-–∫–æ–¥–∞
        if user['qr_id'] != scanned_qr_id:
            return await message.answer("üö´ –≠—Ç–æ –Ω–µ –≤–∞—à QR-–∫–æ–¥!")
        if not user.get('is_active', True):
            return await message.answer("üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.PendingRequest.create(
            requester_id=message.from_user.id,
            pass_id=scanned_qr_id,
            user_type='user'
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"access_allow_{scanned_qr_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"access_deny_{scanned_qr_id}")
            ]
        ])
        admin_text = (
            f"üîî –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"üë§ {user['full_name']}\n"
            f"üÜî QR-ID: {scanned_qr_id}"
        )
        await bot.send_message(
            chat_id=os.getenv("ADMIN_CHAT_ID"),
            text=admin_text,
            reply_markup=keyboard
        )
        return await message.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

    # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ –≥–æ—Å—Ç–µ–≤–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    return await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@dp.callback_query(F.data.startswith("access_"))
async def handle_access_decision(callback: types.CallbackQuery):
    action, pass_id = callback.data.split('_')[1:]
    pass_id = int(pass_id)
    
    request = db.PendingRequest.get_by_pass_id(pass_id)
    if not request:
        await callback.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª")
        return
    
    user_type = request['user_type']
    requester_id = request['requester_id']
    status = "—Ä–∞–∑—Ä–µ—à—ë–Ω" if action == "allow" else "–æ—Ç–∫–ª–æ–Ω—ë–Ω"
    status_upper = status.upper()

    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message_allow = "‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å."
    user_message_deny = "‚ùå –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Å—Ç–µ–π
    if user_type == 'guest':
        guest = db.Guest.table.get(Query().qr_id == pass_id)
        if guest:
            if action == "deny":
                db.Guest.update(guest.doc_id, {'is_active': False})  # –ë–ª–æ–∫–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –≥–æ—Å—Ç–µ–π
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—è
            if requester_id:
                try:
                    await bot.send_message(
                        chat_id=requester_id,
                        text=user_message_allow if action == "allow" else user_message_deny
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Å—Ç—é: {e}")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            db.AccessLog.log_entry(
                user_type='guest',
                user_id=pass_id,
                status=status
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif user_type == 'user':
        user = db.User.table.get(Query().user_id == requester_id)
        if user:
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
            try:
                await bot.send_message(
                    chat_id=requester_id,
                    text=user_message_allow if action == "allow" else user_message_deny
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            db.AccessLog.log_entry(
                user_type='user',
                user_id=requester_id,
                status=status
            )

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    db.PendingRequest.table.remove(doc_ids=[request.doc_id])
    await callback.message.edit_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status_upper} ‚úÖ")
    await callback.answer()

@dp.message(Command('create_temp_pass'))
async def create_temp_pass(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ (–¥–ª—è –≥–æ—Å—Ç–µ–π)"""
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        days = int(message.text.split()[1])
    except:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /create_temp_pass <–¥–Ω–µ–π>")
    
    doc_id, qr_id = db.Guest.create_temp_pass(days)
    await message.answer_document(
        types.FSInputFile(f'qrcodes/guest_{doc_id}.png'),
        caption=f"üîë –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω!\nID: {qr_id}\n–°—Ä–æ–∫: {days} –¥–Ω."
    )

@dp.message(Command('block_pass'))
async def block_pass(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        doc_id = int(message.text.split()[1])
        user_type = message.text.split()[2].lower()
    except:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /block_pass <ID> <employee/guest>")
    
    if user_type == 'employee':
        db.Employee.toggle_status(doc_id)
    elif user_type == 'guest':
        db.Guest.toggle_status(doc_id)
    else:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫–∞ {doc_id} –∏–∑–º–µ–Ω—ë–Ω")

@dp.message(Command('logs'))
async def show_logs(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    logs = db.AccessLog.get_all()
    if not logs:
        return await message.answer("üìÇ –ñ—É—Ä–Ω–∞–ª –ø—É—Å—Ç")
    
    text = "üìú –ñ—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞:\n\n"
    for log in logs[-10:]:
        text += (
            f"–î–∞—Ç–∞: {log['timestamp'][:10]}\n"
            f"–¢–∏–ø: {log['user_type']}\n"
            f"ID: {log['user_id']}\n"
            f"–°—Ç–∞—Ç—É—Å: {log['status']}\n\n"
        )
    await message.answer(text)
    
# --- –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Ä–∞–∑–¥–µ–ª ---
class NewsState(StatesGroup):
    title = State()
    content = State()
    media = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω—ã –ü–ï–†–í–´–ú–ò
@dp.message(Command('add_news'))
async def add_news_start(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await state.set_state(NewsState.title)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:")

@dp.message(NewsState.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(NewsState.content)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")

@dp.message(NewsState.content)
async def process_content(message: types.Message, state: FSMContext):
    await state.update_data(content=message.text)
    await state.set_state(NewsState.media)
    await message.answer("üñºÔ∏è –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/PDF –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")

@dp.message(NewsState.media)
async def process_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_type = None
    media_id = None
    
    if message.text and message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        pass
    else:
        if message.photo:
            media_type = 'photo'
            media_id = message.photo[-1].file_id
        elif message.video:
            media_type = 'video'
            media_id = message.video.file_id
        elif message.document:
            media_type = 'document'
            media_id = message.document.file_id
        else:
            await message.answer("‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ PDF")
            return

    db.News.create(
        title=data['title'],
        content=data['content'],
        media_type=media_type,
        media_id=media_id
    )

    # –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    users = db.User.get_all()
    for user in users:
        try:
            await bot.send_message(
                chat_id=user['user_id'],
                text="üéâ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å! –ù–∞–ø–∏—à–∏—Ç–µ /news —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")

    await state.clear()
    await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")

@dp.message(Command('news'))
async def show_last_news(message: types.Message):
    news = db.News.get_all()
    if not news:
        return await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
    
    last_news = news[-1]
    text = f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å:</b>\n\n{last_news['title']}\n\n{last_news['content']}"
    
    try:
        if last_news.get('media_type') == 'photo':
            await message.answer_photo(last_news['media_id'], caption=text)
        elif last_news.get('media_type') == 'video':
            await message.answer_video(last_news['media_id'], caption=text)
        elif last_news.get('media_type') == 'document':
            await message.answer_document(last_news['media_id'], caption=text)
        else:
            await message.answer(text)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏")
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")

@dp.message(Command('all_news'))
async def show_all_news(message: types.Message):
    news = db.News.get_all()
    if not news:
        return await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")

    await message.answer("üóû –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏:")
    
    for item in reversed(news):
        text = f"<b>{item['title']}</b>\n\n{item['content']}"
        media_type = item.get('media_type')
        media_id = item.get('media_id')
        
        try:
            if media_type == 'photo':
                await message.answer_photo(media_id, caption=text)
            elif media_type == 'video':
                await message.answer_video(media_id, caption=text)
            elif media_type == 'document':
                await message.answer_document(media_id, caption=text)
            else:
                await message.answer(text)
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å –æ—Ç {item['created_at'][:10]}")
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")

@dp.message(Command('delete_all_news'))
async def delete_all_news(message: types.Message):
    if not is_admin(message.from_user.id):
        return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    db.News.table.truncate()
    await message.answer("‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command('help'))
async def show_help(message: types.Message):
    if is_admin(message.from_user.id):
        help_text = """
<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/reg - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
/generate_user_qr [–§–ò–û] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
/create_temp_pass [–¥–Ω–∏] - –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥–æ—Å—Ç–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫
/block_pass [ID] [—Ç–∏–ø] - –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫ (employee/guest)
/logs - –ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª –¥–æ—Å—Ç—É–ø–∞
/add_news - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
/delete_all_news - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
/all_news - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏

<b>üë§ –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/my_qrcode - –ú–æ–π QR-–ø—Ä–æ–ø—É—Å–∫
/scan_pass [–∫–æ–¥] - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫
/news - –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å
"""
    else:
        help_text = """
<b>üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/reg - –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
/my_qrcode - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π QR-–ø—Ä–æ–ø—É—Å–∫
/scan_pass [–∫–æ–¥] - –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫
/news - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å

<code>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</code>
"""
    
    await message.answer(help_text)

@dp.message(F.text.startswith('/'))
async def handle_unknown_command(message: types.Message):
    await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–∞.")

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–°–ï–ì–î–ê –í –ö–û–ù–¶–ï
@dp.message()
async def register_user(message: types.Message):
    try:
        db.User.create(message.from_user.id)
        logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

if __name__ == '__main__':
    dp.run_polling(bot)